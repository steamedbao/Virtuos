Static cast

Static_cast is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. 
static_cast performs no runtime checks. 
This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. 

void func(void *data) {
  // Conversion from MyClass* -> void* is implicit
  MyClass *c = static_cast<MyClass*>(data);
  ...
}

int main() {
  MyClass c;
  start_thread(&func, &c)  // func(&c) will be called
      .join();
}

-------------------------------------------------------------------------------------------------

Dynamic cast

dynamic_cast is useful when you don't know what the dynamic type of the object is. 
It returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a bad_cast exception is thrown in that case).

if (JumpStm *j = dynamic_cast<JumpStm*>(&stm)) {
  ...
} else if (ExprStm *e = dynamic_cast<ExprStm*>(&stm)) {
  ...
}

struct Base { };
struct Derived : Base { };
int main() {
  Derived d; Base *b = &d;
  dynamic_cast<Derived*>(b); // Invalid
 
}

-------------------------------------------------------------------------------------------------

Regular cast

These casts are also called C-style cast.
A C-style cast is basically identical to trying out a range of sequences of C++ casts, 
and taking the first C++ cast that works, without ever considering dynamic_cast.
Needless to say, this is much more powerful as it combines all of const_cast, static_cast and reinterpret_cast, 
but it's also unsafe, because it does not use dynamic_cast.

In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class,
while the "equivalent" static_cast sequence would give you a compile-time error for that.
