Heriarchy
The lower one inherit certain traits of the higher one.

Inheritance
In an inheritance (is-a) relationship, the class being inherited from is called the parent class, base class, or superclass, 
and the class doing the inheriting is called the child class, derived class, or subclass

1) single level inheritance     A --> B (base)
2) Multi level inheritance      A --> B --> C
3) multiple inheriance          A <-- B --> C
4) hierarchical inheritance     A --> B <-- C
5) hybrid inheritance           D <-- C <-- A --> B --> D

public : available everywhere
private : not available in either base/child

protected access specifier
--> available between child and base

class base
{
public:
  int x;
protected:
  int y;
private:
  int z; // not accessible from publicDerived

};

class prtectedDerived: public base
{
 //x,y accessible, z no (from 2nd derived class)
};

class prtectedDerived: protected base
{
 //x,y accessible, z no (from 2nd derived class)
};

class prtectedDerived: private base
{
 //x,y and z all inaccessible, because x and y are coverted to private here (from 2nd derived class)
};


****ALL are accessible from own class****

_________________________________________________________________________________________________________

How are derived class constructed?
First, the most-base class constructed first, 
then each child class is constructed in order, 
until the most-child class is constructed last.


look at this to revise how parent child inheritance chain works:

#include <iostream>
class A {
public:
	A(int a)
	{
		std::cout << "A:" << a << '\n';

	}

};

class B : public A
{
public:
	B(int a, double b)
		:A(a)
	{
		std::cout << "B:" << b << '\n';
	}
};

class C : public B
{
public:
	C(int a, double b, char c)
		:B(a, b)
	{
	std::cout << "C:" << c << '\n';

	}
};

int main()
{
	A a(1);
	B b(2, 3.1);
	C c(5, 4.3, 'R');
	system("PAUSE");
}

_________________________________________________________________________________________________________

When derived class is destroyed, each destructor is called in reverse order of construction. 
So for above example, when C is destroyed, C destructor is called first, then B destructor, then A des.

_________________________________________________________________________________________________________

Inheritance chain quiz code

#include <string>

#include <iostream>

class Fruit
{
private: 
	std::string m_name;
	std::string m_color;

public:
	Fruit(std::string name = "", std::string color = "")
		: m_name(name), m_color(color)
	{

	}

	const std::string& getName() const { return m_name; }
	const std::string& getColor() const { return m_color; }
};

class Apple : public Fruit
{
private:
	double m_fiber;
public:
	Apple(std::string name = "", std::string color = "", double fiber = 0.0)
		: Fruit(name, color), m_fiber(fiber)
	{
	}
	double getFiber() const { return m_fiber; }

};

std::ostream& operator<<(std::ostream& out, const Apple &a)
{
	out << "Apple (" << a.getName() << ", " << a.getColor() << ", " << a.getFiber() << ")\n";
	return out;

}

class Banana : public Fruit
{

public:
	Banana(std::string name = "", std::string color = "")
		: Fruit(name, color)
	{
	}

};

std::ostream& operator<<(std::ostream& out, const Banana &b)
{
	out << "Banana (" << b.getName() << ", " << b.getColor() << ")\n";
	return out;

}

int main()
{
	const Apple a("Red delicious", "red", 4.2);
	std::cout << a;

	const Banana b("Cavendish", "yellow");
	std::cout << b;


	system("PAUSE");
}

_________________________________________________________________________________________________________
